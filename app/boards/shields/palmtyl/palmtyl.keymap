#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define BASELAYER 0
#define GAMETHUMB 1
#define FUNCTIONS 2
#define COMBO_TERM_LONG 100  
#define COMBO(NAME, BINDINGS, KEYPOS, MS) \
    combo_##NAME { \
        timeout-ms = <MS>; \
        key-positions = <KEYPOS>; \
        bindings = <BINDINGS>; \
    };

#define MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_UP(ONES) \
	vrn##ONES##um: vim_rnu_##ONES##_up_macro { \
		compatible = "zmk,behavior-macro"; \
		#binding-cells = <0>; \
		bindings = <&kp N##ONES &kp UP>; \
	};  
#define MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(TENS, ONES) \
	vrn##TENS##ONES##um: vim_rnu_##TENS##ONES##_up_macro { \
		compatible = "zmk,behavior-macro"; \
		#binding-cells = <0>; \
		bindings = <&kp N##TENS &kp N##ONES &kp UP>; \
	};  
#define MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_DOWN(ONES) \
	vrn##ONES##dm: vim_rnu_##ONES##_down_macro { \
		compatible = "zmk,behavior-macro"; \
		#binding-cells = <0>; \
		bindings = <&kp N##ONES &kp DOWN>; \
	};  
#define MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(TENS, ONES) \
	vrn##TENS##ONES##dm: vim_rnu_##TENS##ONES##_down_macro { \
		compatible = "zmk,behavior-macro"; \
		#binding-cells = <0>; \
		bindings = <&kp N##TENS &kp N##ONES &kp DOWN>; \
	};  

#define HOLD_TAP_TAPPING_TERM_MS 500
#define HOLD_QUICK_TAP_MS 400
#define NUMBER_KEY_HOLD_TAP(NUMBER) \
	n##NUMBER##ht: number_key_##NUMBER##_hold_tap { \
		compatible = "zmk,behavior-hold-tap"; \
		#binding-cells = <2>; \
		flavor = "tap-preferred"; \
		tapping-term-ms = <HOLD_TAP_TAPPING_TERM_MS>; \
		quick-tap-ms = <HOLD_QUICK_TAP_MS>; \
		bindings = <&n##NUMBER##htm>, <&kp>; \
	};
#define GENERIC_KEY_HOLD_TAP(SHORTNAME) \
	SHORTNAME##ht: SHORTNAME##_hold_tap { \
		compatible = "zmk,behavior-hold-tap"; \
		#binding-cells = <2>; \
		flavor = "tap-preferred"; \
		tapping-term-ms = <HOLD_TAP_TAPPING_TERM_MS>; \
		quick-tap-ms = <HOLD_QUICK_TAP_MS>; \
		bindings = <&##SHORTNAME##htm>, <&kp>; \
	};
#define VARIABLE_HOLD_TAP(REGISTER) \
	v##REGISTER##ht: variable_vim_register_##REGISTER##_hold_tap { \
		compatible = "zmk,behavior-hold-tap"; \
		#binding-cells = <2>; \
		flavor = "tap-preferred"; \
		tapping-term-ms = <HOLD_TAP_TAPPING_TERM_MS>; \
		quick-tap-ms = <HOLD_QUICK_TAP_MS>; \
		bindings = <&pvrmop>, <&kp>; \
	};
#define FUNCTION_KEY_HOLD_TAP(NUMBER) \
	f##NUMBER##ht: function_key_##NUMBER##_hold_tap { \
		compatible = "zmk,behavior-hold-tap"; \
		#binding-cells = <2>; \
		flavor = "tap-preferred"; \
		tapping-term-ms = <HOLD_TAP_TAPPING_TERM_MS>; \
		quick-tap-ms = <HOLD_QUICK_TAP_MS>; \
		bindings = <&f##NUMBER##htm>, <&kp>; \
	};

/ {
	macros {
		vcm: vim_column_macro {
			compatible = "zmk,behavior-macro-one-param";
			#binding-cells = <1>; // Must be 1
			bindings 
				= <&macro_param_1to1>
				, <&kp MACRO_PLACEHOLDER &kp N0 &kp PIPE>
				;
		};
		vc100m: vim_column_100_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp N1 &kp N0 &kp N0 &kp PIPE>;
		};
		dtappendlpm: dtappendlp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp DOT &kp A &kp P &kp P &kp E &kp N &kp D &kp LPAR>;
		};
		spakeqspm: spakeqsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp STAR &kp EQUAL &kp SPACE>;
		};
		speqsp0erm: speqsp0er_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp EQUAL &kp SPACE &kp N0 &kp ENTER>;
		};
		// ligatures
		speqspm: speqsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp EQUAL &kp SPACE>;
		};
		sppsspm: sppssp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp PLUS &kp SPACE>;
		};
		spmsspm: spmssp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp MINUS &kp SPACE>;
		};
		spltspm: spltsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp LT &kp SPACE>;
		};
		spgtspm: spgtsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp GT &kp SPACE>;
		};
		spcneqspm: spcneqsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp COLON &kp EQUAL &kp SPACE>;
		};
		speqeqspm: speqeqsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp EQUAL &kp EQUAL &kp SPACE>;
		};
		splteqspm: splteqsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp LT &kp EQUAL &kp SPACE>;
		};
		spgteqspm: spgteqsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp GT &kp EQUAL &kp SPACE>;
		};
		spandspm: spandsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp A &kp N &kp D &kp SPACE>;
		};
		breakerbem: breakerbe_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp B &kp R &kp E &kp A &kp K &kp ENTER &kp BSPC>;
		};
		spsphhspm: spsphhsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp SPACE &kp HASH &kp SPACE>;
		};
		erdefspm: erdefsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp ENTER &kp D &kp E &kp F &kp SPACE>;
		};
		erbeelsecnerm: _macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp ENTER &kp BSPC &kp E &kp L &kp S &kp L &kp E &kp COLON &kp ENTER>;
		};
		forspm: forsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp F &kp O &kp R &kp SPACE>;
		};
		rangelpm: rangelp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp R &kp A &kp N &kp G &kp E &kp LPAR>;
		};
		spnonespm: spnonesp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp LS(N) &kp O &kp N &kp E &kp SPACE>;
		};
		ifspm: ifsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp I &kp F &kp SPACE>;
		};
		spinspm: spinsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp I &kp N &kp SPACE>;
		};
		continueerbem: continueerbe_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp C &kp O &kp N &kp T &kp I &kp N &kp U &kp E &kp ENTER &kp BSPC>;
		};
		erbeelifspm: erbeelifsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp ENTER &kp BSPC &kp E &kp L &kp I &kp F &kp SPACE>;
		};
		spmseqspm: spmseqsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp MINUS &kp EQUAL &kp SPACE>;
		};
		spnotspm: spnotsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp N &kp O &kp T &kp SPACE>;
		};
		sporspm: sporsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp O &kp R &kp SPACE>;
		};
		sppseqspm: sppseqsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp PLUS &kp EQUAL &kp SPACE>;
		};
		lenlpm: lenlp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp L &kp E &kp N &kp LPAR>;
		};
		returnspm: returnsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp R &kp E &kp T &kp U &kp R &kp N &kp SPACE>;
		};
		falsespm: falsesp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LS(F) &kp A &kp L &kp S &kp E &kp SPACE>;
		};
		truespm: truesp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LS(T) &kp R &kp U &kp E &kp SPACE>;
		};
		spemeqspm: spemeqsp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp SPACE &kp EXCL &kp EQUAL &kp SPACE>;
		};
		printlpm: printlp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp P &kp R &kp I &kp N &kp T &kp LPAR>;
		};
		whilespm: whilesp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp W &kp H &kp I &kp L &kp E &kp SPACE>;
		};
		maxlpm: maxlp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp M &kp A &kp X &kp LPAR>;
		};
		trycnerm: trycner_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp T &kp R &kp Y &kp COLON &kp ENTER>;
		};
		minlpm: minlp_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp M &kp I &kp N &kp LPAR>;
		};
		n1htm: number_key_1_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp N1>;
		};
		n2htm: number_key_2_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp N2>;
		};
		n3htm: number_key_3_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp N3>;
		};
		n4htm: number_key_4_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp N4>;
		};
		n5htm: number_key_5_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp N5>;
		};
		n6htm: number_key_6_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp N6>;
		};
		n7htm: number_key_7_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp N7>;
		};
		n8htm: number_key_8_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp N8>;
		};
		n9htm: number_key_9_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp N9>;
		};
		n0htm: number_key_0_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp N0>;
		};
		pshtm: print_screen_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp P &kp S>;
		};
		gthtm: gamethumb_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp G &kp T>;
		};
		eqhtm: equals_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp E &kp Q>;
		};
		schtm: semicolon_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp COLON &kp ENTER>;
		};
		mshtm: minus_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp M &kp S>;
		};
		eehtm: escape_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp E &kp E>;
		};
		sqhtm: single_quote_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp S &kp Q>;
		};
		bshtm: backslash_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp B &kp S>;
		};
		cahtm: comma_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp C &kp A>;
		};
		dthtm: dot_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp D &kp T>;
		};
		fshtm: forwardslash_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp F &kp S>;
		};
		gehtm: grave_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp G &kp E>;
		};
		lbhtm: left_bracket_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp L &kp B>;
		};
		rbhtm: right_bracket_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp R &kp B>;
		};
		sehtm: space_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp S &kp E>;
		};
		f1htm: function_key_1_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp F &kp N0 &kp N1>;
		};
		f2htm: function_key_2_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp F &kp N0 &kp N2>;
		};
		f3htm: function_key_3_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp F &kp N0 &kp N3>;
		};
		f5htm: function_key_5_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp F &kp N0 &kp N5>;
		};
		f6htm: function_key_6_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp F &kp N0 &kp N6>;
		};
		f7htm: function_key_7_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp F &kp N0 &kp N7>;
		};
		f8htm: function_key_8_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp F &kp N0 &kp N8>;
		};
		f9htm: function_key_9_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp F &kp N0 &kp N9>;
		};
		f10htm: function_key_10_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp F &kp N1 &kp N0>;
		};
		f11htm: function_key_11_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp F &kp N1 &kp N1>;
		};
		f12htm: function_key_12_hold_tap_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp F &kp N1 &kp N2>;
		};
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_UP(1)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_UP(2)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_UP(3)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_UP(4)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_UP(5)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_UP(6)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_UP(7)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_UP(8)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_UP(9)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(1,0)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(1,1)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(1,2)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(1,3)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(1,4)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(1,5)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(1,6)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(1,7)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(1,8)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(1,9)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(2,0)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(2,1)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(2,2)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(2,3)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(2,4)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(2,5)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(2,6)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(2,7)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(2,8)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(2,9)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(3,0)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(3,1)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(3,2)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(3,3)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(3,4)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(3,5)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(3,6)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(3,7)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(3,8)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(3,9)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(4,0)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(4,1)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(4,2)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(4,3)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(4,4)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(4,5)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(4,6)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(4,7)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(4,8)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_UP(4,9)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_DOWN(1)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_DOWN(2)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_DOWN(3)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_DOWN(4)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_DOWN(5)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_DOWN(6)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_DOWN(7)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_DOWN(8)
		MACRO_VIM_RELATIVE_LINE_1_DIGIT_NUMBER_DOWN(9)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(1,0)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(1,1)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(1,2)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(1,3)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(1,4)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(1,5)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(1,6)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(1,7)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(1,8)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(1,9)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(2,0)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(2,1)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(2,2)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(2,3)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(2,4)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(2,5)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(2,6)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(2,7)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(2,8)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(2,9)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(3,0)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(3,1)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(3,2)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(3,3)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(3,4)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(3,5)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(3,6)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(3,7)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(3,8)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(3,9)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(4,0)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(4,1)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(4,2)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(4,3)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(4,4)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(4,5)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(4,6)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(4,7)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(4,8)
		MACRO_VIM_RELATIVE_LINE_2_DIGIT_NUMBER_DOWN(4,9)
		lvspsbs: leet_vscode_copy_paste_side_by_side_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings 
				= <&macro_wait_time 50>
				, <&kp ESC &kp G &kp G &kp LS(V) &kp LS(G) &kp DQT &kp PLUS &kp Y>
				, <&macro_wait_time 250>
				, <&kp LA(TAB) &kp ESC>
				, <&macro_wait_time 50>
				, <&kp G &kp G &kp LS(V) &kp LS(G) &kp DQT &kp PLUS &kp P>
				;
		};		
		swivrmop: store_word_in_vim_register_macro {
			compatible = "zmk,behavior-macro-one-param";
			#binding-cells = <1>; // Must be 1
			bindings 
				= <&kp ESC &kp LEFT &kp LEFT &kp E &kp V &kp B &kp DQT>
				, <&macro_param_1to1>
			 	, <&kp MACRO_PLACEHOLDER &kp Y &kp E &kp A>
				;
		};		
        pvrmop: paste_vim_register_macro {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>; // Must be 1
            bindings
				= <&macro_press &kp LCTRL>
				, <&macro_tap &kp R>
				, <&macro_release &kp LCTRL>
				, <&macro_param_1to1>
				, <&macro_tap &kp MACRO_PLACEHOLDER>
				;
        };
		vwam: vim_write_all_macro {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp ESC &kp COLON &kp W &kp A &kp ENTER>;
		};
	};
	
	behaviors {
		ltr: layer_tap_repeat {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <150>;
			quick-tap-ms = <400>;
			bindings = <&mo>, <&kp>;
		};
		htr: mod_tap_repeat {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <150>;
			quick-tap-ms = <400>;
			bindings = <&kp>, <&kp>;
		};
		NUMBER_KEY_HOLD_TAP(1)
		NUMBER_KEY_HOLD_TAP(2)
		NUMBER_KEY_HOLD_TAP(3)
		NUMBER_KEY_HOLD_TAP(4)
		NUMBER_KEY_HOLD_TAP(5)
		NUMBER_KEY_HOLD_TAP(6)
		NUMBER_KEY_HOLD_TAP(7)
		NUMBER_KEY_HOLD_TAP(8)
		NUMBER_KEY_HOLD_TAP(9)
		NUMBER_KEY_HOLD_TAP(0)
		GENERIC_KEY_HOLD_TAP(ps)
		gtht: gamethumb_layer_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <150>;
			quick-tap-ms = <400>;
			bindings = <&gthtm>, <&tog>;
		};
		GENERIC_KEY_HOLD_TAP(eq)
		GENERIC_KEY_HOLD_TAP(sc)
		GENERIC_KEY_HOLD_TAP(ms)
		GENERIC_KEY_HOLD_TAP(ee)
		GENERIC_KEY_HOLD_TAP(sq)
		GENERIC_KEY_HOLD_TAP(bs)
		GENERIC_KEY_HOLD_TAP(ca)
		GENERIC_KEY_HOLD_TAP(dt)
		GENERIC_KEY_HOLD_TAP(fs)
		GENERIC_KEY_HOLD_TAP(ge)
		GENERIC_KEY_HOLD_TAP(lb)
		GENERIC_KEY_HOLD_TAP(rb)
		GENERIC_KEY_HOLD_TAP(se)
		VARIABLE_HOLD_TAP(Q)
		VARIABLE_HOLD_TAP(W)
		VARIABLE_HOLD_TAP(F)
		VARIABLE_HOLD_TAP(P)
		VARIABLE_HOLD_TAP(B)
		VARIABLE_HOLD_TAP(J)
		VARIABLE_HOLD_TAP(L)
		VARIABLE_HOLD_TAP(U)
		VARIABLE_HOLD_TAP(Y)
		VARIABLE_HOLD_TAP(A)
		VARIABLE_HOLD_TAP(R)
		VARIABLE_HOLD_TAP(S) 
		VARIABLE_HOLD_TAP(T) 
		VARIABLE_HOLD_TAP(G)  
		VARIABLE_HOLD_TAP(M)
		VARIABLE_HOLD_TAP(N)
		VARIABLE_HOLD_TAP(E)
		VARIABLE_HOLD_TAP(I)
		VARIABLE_HOLD_TAP(O)
		VARIABLE_HOLD_TAP(Z)
		VARIABLE_HOLD_TAP(X)
		VARIABLE_HOLD_TAP(C)
		VARIABLE_HOLD_TAP(D)
		VARIABLE_HOLD_TAP(V) 
		VARIABLE_HOLD_TAP(K) 
		VARIABLE_HOLD_TAP(H)
		FUNCTION_KEY_HOLD_TAP(1)
		FUNCTION_KEY_HOLD_TAP(2)
		FUNCTION_KEY_HOLD_TAP(3)
		FUNCTION_KEY_HOLD_TAP(5)
		FUNCTION_KEY_HOLD_TAP(6)
		FUNCTION_KEY_HOLD_TAP(7)
		FUNCTION_KEY_HOLD_TAP(8)
		FUNCTION_KEY_HOLD_TAP(9)
		FUNCTION_KEY_HOLD_TAP(10)
		FUNCTION_KEY_HOLD_TAP(11)
		FUNCTION_KEY_HOLD_TAP(12)
	};

    combos {
        compatible = "zmk,combos";
		COMBO(leet_vscode_copy_paste_side_by_side, &lvspsbs, 12 70, COMBO_TERM_LONG) // equals + del
   		COMBO(vim_write_all_macro, &vwam, 22 70, COMBO_TERM_LONG) // colon + del
		COMBO(right_ctrl, &kp RCTRL, 44 45, COMBO_TERM_LONG) // comma period
		COMBO(underscore, &kp UNDERSCORE, 53 54, COMBO_TERM_LONG) // tab enter
		COMBO(sp_eq_sp, &speqspm, 70 73, COMBO_TERM_LONG) // del repeat
		//COMBO(, &m,  1 55, COMBO_TERM_LONG) // 1 + bksp 
		COMBO(dtappendlp,&dtappendlpm,2 55,COMBO_TERM_LONG) // 2 + bksp 
		//COMBO(, &spsphhspm,  3 55, COMBO_TERM_LONG) // 3 + bksp 
		//COMBO(, &m,  4 55, COMBO_TERM_LONG) // 4 + bksp 
		//COMBO(, &m,  5 55, COMBO_TERM_LONG) // 5 + bksp 
		//COMBO(, &m,  6 55, COMBO_TERM_LONG) // 6 + bksp 
		//COMBO(, &m,  7 55, COMBO_TERM_LONG) // 7 + bksp 
		COMBO(spakeqsp, &spakeqspm,  8 55, COMBO_TERM_LONG) // 8 + bksp 
		//COMBO(, &m,  9 55, COMBO_TERM_LONG) // 9 + bksp 
		COMBO(speqsp0er,&speqsp0erm, 10 55,COMBO_TERM_LONG) // 0 + bksp 
		COMBO(sppssp,   &sppsspm,  12 55, COMBO_TERM_LONG) // = + bksp 
		COMBO(spcneqsp, &spcneqspm, 22 55, COMBO_TERM_LONG) // ; + bksp 
		COMBO(speqeqsp, &speqeqspm, 24 55, COMBO_TERM_LONG) // esc + bksp 
		COMBO(spmssp,   &spmsspm,   23 55, COMBO_TERM_LONG) // - + bksp 
		COMBO(splteqsp, &splteqspm, 12 44, COMBO_TERM_LONG) // = + , 
		COMBO(spgteqsp, &spgteqspm, 12 45, COMBO_TERM_LONG) // = + . 
		COMBO(spltsp,   &spltspm,   44 55, COMBO_TERM_LONG) // , + bksp 
		COMBO(spgtsp,   &spgtspm,   45 55, COMBO_TERM_LONG) // . + bksp 
		COMBO(spandsp,  &spandspm,  25 55, COMBO_TERM_LONG) // a + bksp 
		COMBO(breakerbe, &breakerbem, 17 55, COMBO_TERM_LONG) // b + bksp 
		COMBO(spsphhsp, &spsphhspm, 39 55, COMBO_TERM_LONG) // c + bksp, comment 
		COMBO(erdefsp, &erdefspm, 40 55, COMBO_TERM_LONG) // d + bksp 
		COMBO(erbeelsecner, &erbeelsecnerm, 32 55, COMBO_TERM_LONG) // e + bksp 
		COMBO(forsp, &forspm, 15 55, COMBO_TERM_LONG) // f + bksp 
		COMBO(rangelp, &rangelpm, 29 55, COMBO_TERM_LONG) // g + bksp 
		COMBO(spnonesp, &spnonespm, 43 55, COMBO_TERM_LONG) // h + bksp 
		COMBO(ifsp, &ifspm, 33 55, COMBO_TERM_LONG) // i + bksp 
		COMBO(spinsp, &spinspm, 18 55, COMBO_TERM_LONG) // j + bksp 
		COMBO(continueerbe, &continueerbem, 42 55, COMBO_TERM_LONG) // k + bksp 
		COMBO(erbeelifsp, &erbeelifspm, 19 55, COMBO_TERM_LONG) // l + bksp 
		COMBO(spmseqsp, &sppseqspm, 30 55, COMBO_TERM_LONG) // m + bksp 
		COMBO(spnotsp, &spnotspm, 31 55, COMBO_TERM_LONG) // n + bksp 
		COMBO(sporsp, &sporspm, 34 55, COMBO_TERM_LONG) // o + bksp 
		COMBO(sppseqsp, &sppseqspm, 17 55, COMBO_TERM_LONG) // p + bksp 
		COMBO(lenlp, &lenlpm, 13 55, COMBO_TERM_LONG) // q + bksp 
		COMBO(returnsp, &returnspm, 26 55, COMBO_TERM_LONG) // r + bksp 
		COMBO(falsesp, &falsespm, 27 55, COMBO_TERM_LONG) // s + bksp 
		COMBO(truesp, &truespm, 28 55, COMBO_TERM_LONG) // t + bksp 
		COMBO(spemeqsp, &spemeqspm, 20 55, COMBO_TERM_LONG) // u + bksp, unequal 
		COMBO(printlp, &printlpm, 41 55, COMBO_TERM_LONG) // v + bksp , view
		COMBO(whilesp, &whilespm, 14 55, COMBO_TERM_LONG) // w + bksp 
		COMBO(maxlp, &maxlpm, 38 55, COMBO_TERM_LONG) // x + bksp 
		COMBO(trycner, &trycnerm, 21 55, COMBO_TERM_LONG) // y + bksp 
		COMBO(minlp, &minlpm, 37 55, COMBO_TERM_LONG) // z + bksp 
  		COMBO(store_word_in_vim_register_Q, &swivrmop Q, 13 70, COMBO_TERM_LONG) // alpha + del
  		COMBO(store_word_in_vim_register_W, &swivrmop W, 14 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_F, &swivrmop F, 15 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_P, &swivrmop P, 16 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_B, &swivrmop B, 17 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_J, &swivrmop J, 18 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_L, &swivrmop L, 19 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_U, &swivrmop U, 20 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_Y, &swivrmop Y, 21 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_A, &swivrmop A, 25 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_R, &swivrmop R, 26 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_S, &swivrmop S, 27 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_T, &swivrmop T, 28 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_G, &swivrmop G, 29 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_M, &swivrmop M, 30 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_N, &swivrmop N, 31 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_E, &swivrmop E, 32 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_I, &swivrmop I, 33 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_O, &swivrmop O, 34 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_Z, &swivrmop Z, 37 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_X, &swivrmop X, 38 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_C, &swivrmop C, 39 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_D, &swivrmop D, 40 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_V, &swivrmop V, 41 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_K, &swivrmop K, 42 70, COMBO_TERM_LONG)
  		COMBO(store_word_in_vim_register_H, &swivrmop H, 43 70, COMBO_TERM_LONG)
		COMBO(capital_M, &kp LS(M), 55 56, COMBO_TERM_LONG)
		// a 10, r 20, x 30, w 40, c1d2v3s4t5g6f7p8b9Bksp0
		COMBO(relative_line_number_1_up, &vrn1um, 39 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_2_up, &vrn2um, 40 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_3_up, &vrn3um, 41 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_4_up, &vrn4um, 27 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_5_up, &vrn5um, 28 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_6_up, &vrn6um, 29 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_7_up, &vrn7um, 15 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_8_up, &vrn8um, 16 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_9_up, &vrn9um, 17 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_10_up, &vrn10um, 25 55 62, COMBO_TERM_LONG)
		COMBO(relative_line_number_11_up, &vrn11um, 25 39 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_12_up, &vrn12um, 25 40 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_13_up, &vrn13um, 25 41 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_14_up, &vrn14um, 25 27 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_15_up, &vrn15um, 25 28 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_16_up, &vrn16um, 25 29 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_17_up, &vrn17um, 25 15 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_18_up, &vrn18um, 25 16 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_19_up, &vrn19um, 25 17 55, COMBO_TERM_LONG)
   		COMBO(relative_line_number_20_up, &vrn20um, 26 55 62, COMBO_TERM_LONG)
		COMBO(relative_line_number_21_up, &vrn21um, 26 39 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_22_up, &vrn22um, 26 40 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_23_up, &vrn23um, 26 41 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_24_up, &vrn24um, 26 27 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_25_up, &vrn25um, 26 28 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_26_up, &vrn26um, 26 29 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_27_up, &vrn27um, 26 15 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_28_up, &vrn28um, 26 16 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_29_up, &vrn29um, 26 17 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_30_up, &vrn30um, 38 55 62, COMBO_TERM_LONG)
		COMBO(relative_line_number_31_up, &vrn31um, 38 39 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_32_up, &vrn32um, 38 40 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_33_up, &vrn33um, 38 41 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_34_up, &vrn34um, 38 27 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_35_up, &vrn35um, 38 28 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_36_up, &vrn36um, 38 29 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_37_up, &vrn37um, 38 15 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_38_up, &vrn38um, 38 16 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_39_up, &vrn39um, 38 17 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_40_up, &vrn40um, 14 55 62, COMBO_TERM_LONG)
		COMBO(relative_line_number_41_up, &vrn41um, 14 39 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_42_up, &vrn42um, 14 40 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_43_up, &vrn43um, 14 41 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_44_up, &vrn44um, 14 27 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_45_up, &vrn45um, 14 28 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_46_up, &vrn46um, 14 29 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_47_up, &vrn47um, 14 15 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_48_up, &vrn48um, 14 16 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_49_up, &vrn49um, 14 17 55, COMBO_TERM_LONG)
		COMBO(relative_line_number_1_down, &vrn1dm, 39 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_2_down, &vrn2dm, 40 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_3_down, &vrn3dm, 41 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_4_down, &vrn4dm, 27 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_5_down, &vrn5dm, 28 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_6_down, &vrn6dm, 29 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_7_down, &vrn7dm, 15 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_8_down, &vrn8dm, 16 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_9_down, &vrn9dm, 17 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_10_down, &vrn10dm, 25 56 62, COMBO_TERM_LONG)
		COMBO(relative_line_number_11_down, &vrn11dm, 25 39 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_12_down, &vrn12dm, 25 40 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_13_down, &vrn13dm, 25 41 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_14_down, &vrn14dm, 25 27 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_15_down, &vrn15dm, 25 28 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_16_down, &vrn16dm, 25 29 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_17_down, &vrn17dm, 25 15 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_18_down, &vrn18dm, 25 16 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_19_down, &vrn19dm, 25 17 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_20_down, &vrn20dm, 26 56 62, COMBO_TERM_LONG)
		COMBO(relative_line_number_21_down, &vrn21dm, 26 39 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_22_down, &vrn22dm, 26 40 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_23_down, &vrn23dm, 26 41 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_24_down, &vrn24dm, 26 27 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_25_down, &vrn25dm, 26 28 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_26_down, &vrn26dm, 26 29 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_27_down, &vrn27dm, 26 15 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_28_down, &vrn28dm, 26 16 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_29_down, &vrn29dm, 26 17 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_30_down, &vrn30dm, 38 56 62, COMBO_TERM_LONG)
		COMBO(relative_line_number_31_down, &vrn31dm, 38 39 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_32_down, &vrn32dm, 38 40 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_33_down, &vrn33dm, 38 41 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_34_down, &vrn34dm, 38 27 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_35_down, &vrn35dm, 38 28 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_36_down, &vrn36dm, 38 29 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_37_down, &vrn37dm, 38 15 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_38_down, &vrn38dm, 38 16 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_39_down, &vrn39dm, 38 17 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_40_down, &vrn40dm, 14 56 62, COMBO_TERM_LONG)
		COMBO(relative_line_number_41_down, &vrn41dm, 14 39 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_42_down, &vrn42dm, 14 40 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_43_down, &vrn43dm, 14 41 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_44_down, &vrn44dm, 14 27 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_45_down, &vrn45dm, 14 28 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_46_down, &vrn46dm, 14 29 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_47_down, &vrn47dm, 14 15 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_48_down, &vrn48dm, 14 16 56, COMBO_TERM_LONG)
		COMBO(relative_line_number_49_down, &vrn49dm, 14 17 56, COMBO_TERM_LONG)
		COMBO(vim_column_10, &vcm N1, 25 37, COMBO_TERM_LONG)
		COMBO(vim_column_20, &vcm N2, 26 38, COMBO_TERM_LONG)
		COMBO(vim_column_30, &vcm N3, 27 39, COMBO_TERM_LONG)
		COMBO(vim_column_40, &vcm N4, 28 40, COMBO_TERM_LONG)
		COMBO(vim_column_50, &vcm N5, 29 41, COMBO_TERM_LONG)
		COMBO(vim_column_60, &vcm N6, 30 42, COMBO_TERM_LONG)
		COMBO(vim_column_70, &vcm N7, 31 43, COMBO_TERM_LONG)
		COMBO(vim_column_80, &vcm N8, 32 44, COMBO_TERM_LONG)
		COMBO(vim_column_90, &vcm N9, 33 45, COMBO_TERM_LONG)
		COMBO(vim_column_100, &vc100m, 34 46, COMBO_TERM_LONG)	
	};

    keymap {
        compatible = "zmk,keymap";

        baselayer_layer {
		bindings = <
	&psht 0 PSCRN &n1ht 0 N1 &n2ht 0 N2 &n3ht 0 N3 &n4ht 0 N4 &n4ht 0 N5 &n6ht 0 N6 &n7ht 0 N7 &n8ht 0 N8 &n9ht 0 N9 &n0ht 0 N0 &gtht 0 GAMETHUMB
	&eqht 0 EQUAL &vQht Q Q &vWht W W &vFht F F &vPht P P &vBht B B &vJht J J &vLht L L &vUht U U &vYht Y Y &scht 0 SEMI &msht 0 MINUS
	&eeht 0 ESC &vAht A A &vRht R R &vSht S S &vTht T T &vGht G G &vMht M M &vNht N N &vEht E E &vIht I I &vOht O O &sqht 0 SQT
	&bsht 0 BSLH &vZht Z Z &vXht X X &vCht C C &vDht D D &vVht V V &vKht K K &vHht H H &caht 0 COMMA &dtht 0 DOT &fsht 0 FSLH &geht 0 GRAVE 
	&f1ht 0 F1 &htr HOME PGUP &htr END PGDN &kp LEFT &kp RIGHT &htr LSHFT TAB &htr RSHFT ENTER &kp UP &kp DOWN &lbht 0 LBKT &rbht 0 RBKT &f12ht 0 F12
	&f2ht 0 F2 &htr LG(LC(LEFT)) LALT &htr LCTRL BSPC &f5ht 0 F5 &f8ht 0 F8 &seht 0 SPACE &htr LG(LC(RIGHT)) RALT &f11ht 0 F11
	&f3ht 0 F3 &ltr FUNCTIONS F4 &htr LGUI DEL &f6ht 0 F6 &f7ht 0 F7 &htr RGUI &key_repeat &f9ht 0 F9 &f10ht 0 F10
		>;
	};
//       baselayer_layer {
//		bindings = <
//	&psht PSCRN &n1ht N1 &n2ht N2 &n3ht N3 &n4ht N4 &n4ht N5 &n6ht N6 &n7ht N7 &n8ht N8 &n9ht N9 &n0ht N0 &gtht GAMETHUMB
//	&eqht EQUAL &vQht Q Q &vWht W W &vFht F F &vPht P P &vBht B B &vJht J J &vLht L L &vUht U U &vYht Y Y &scht SEMI &msht MINUS
//	&eeht ESC &vAht A A &vRht R R &vSht S S &vTht T T &vGht G G &vMht M M &vNht N N &vEht E E &vIht I I &vOht O O &sqht SQT
//	&bsht BSLH &vZht Z Z &vXht X X &vCht C C &vDht D D &vVht V V &vKht K K &vHht H H &caht COMMA &dtht DOT &fsht FSLH &geht GRAVE 
//	&f1ht F1 &htr HOME PGUP &htr END PGDN &kp LEFT &kp RIGHT &htr LSHFT TAB &htr RSHFT ENTER &kp UP &kp DOWN &lbht LBKT &rbht RBKT &f12ht F12
//	&f2ht F2 &htr LG(LC(LEFT)) LALT &htr LCTRL BSPC &f5ht F5 &f8ht F8 &seht SPACE &htr LG(LC(RIGHT)) RALT &f11ht F11
//	&f3ht F3 &ltr FUNCTIONS F4 &htr LGUI DEL &f6ht F6 &f7ht F7 &htr RGUI &key_repeat &f9ht F9 &f10ht F10
//		>;
//	};

	gamethumb_layer {
		bindings = <
	&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
	&trans &kp Q  &kp W  &kp F  &kp P  &kp B  &kp J  &kp L  &kp U  &kp Y  &trans &trans
	&trans &kp A  &kp R  &kp S  &kp T  &kp G  &kp M  &kp N  &kp E  &kp I  &kp O  &trans
	&trans &kp Z  &kp X  &kp C  &kp D  &kp V  &kp K  &kp H  &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &kp TAB &kp ENTER &trans &trans &trans &trans &trans
	             &trans &trans &kp BSPC &trans &trans &trans &trans &trans
				 &trans &trans &kp DEL &trans &trans &kp CAPS &trans &trans
		>;
	};

	functions_layer {
		bindings = <
	&kp C_PAUSE &kp C_PREV &kp C_RW &kp C_FF &kp C_NEXT &kp C_PLAY &trans &trans &trans &trans &trans &trans
	&kp C_BRI_UP &kp F12 &kp F7 &kp F8 &kp F9 &kp C_MUTE &trans &trans &trans &trans &trans &trans
	&kp C_BRI_DN &kp F11 &kp F4 &kp F5 &kp F6 &kp C_VOL_UP &trans &trans &trans &trans &trans &trans
	&bt BT_CLR &kp F10 &kp F1 &kp F2 &kp F3 &kp C_VOL_DN &trans &trans &trans &trans &trans &trans
	&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &kp INS &trans &trans &trans &trans &trans &trans
	             &trans &trans &trans &trans &trans &trans &trans &trans
				 &trans &trans &trans &trans &trans &trans &trans &trans
		>;
	};
	};
};
